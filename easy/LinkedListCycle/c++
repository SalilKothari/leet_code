// bad solution:


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        unordered_set<ListNode*> cycleSet;
        
        while(head!=nullptr){
            if(cycleSet.find(head) != cycleSet.end()){
                return true;
            }
            cycleSet.insert(head);
            head = head->next;
        }
        return false;
    }
};



//better hopefully:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        
        if(!head) return false;
        
        ListNode* fast = head->next;
        ListNode* slow = head;
        
        while(fast && fast->next){
            
            if(fast == slow){
                return true;
            }
            fast = fast->next->next;
            slow = slow->next;
        }
               
        return false;
        
    }
};
